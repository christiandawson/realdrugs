<?php
/**
 * PressController is the controller class for the Press object
 *
 * @author Generated by ClassBuilder
 * @version 1.0
 */
 
require_once("verysimple/Phreeze/Controller.php");
require_once("Model/Press.php");

class PressController extends Controller
{

	protected function Init()
	{
		$this->ModelName = "Press";
	}
	
	// base functions suggested to override
	// function ListAll() {}

	function ListPage()
	{
		// these parameters are supplied by extjs grid pagingtoolbar
		$s = Request::Get('start',0);  // start (zero based)
		$ps = Request::Get('limit',20); // page size
		$sc = Request::Get('sort'); // name of column for sorting
		$sd = Request::Get('dir','ASC'); // sort direction
		$cp = $s/$ps + 1; // current page
		
		require_once("Model/DAO/PressCriteria.php");
		$criteria = new PressCriteria();
		
		// if a sort was specified, add it to the criteria
		if ($sc)
		{
			$criteria->SetOrder($sc, ($sd == "ASC") );
		}
		
		$datapage = $this->Phreezer->Query("Press",$criteria)->GetDataPage($cp,$ps);
		
		$this->RenderXML($datapage);
	}
	
	function Display()
	{
		$this->_AssignModel(Request::Get("Id"));
		$this->Render("PressDisplay");
	}

	function Edit()
	{
		$this->_AssignModel(Request::Get("Id"));
		$this->Render("PressEdit");
	}
	
	function Create()
	{
		$this->_AssignModel();
		$this->Render("PressEdit");
	}
	
	function Save()
	{
		$pk = Request::Get("Id");
		
		$press = $this->LoadFromForm($pk);
		
		if (!$press->Validate())
		{
			$this->Assign("press", $press);
			$this->_AssignChildren($press);
			$this->Assign("warning",implode("<br />",$press->GetValidationErrors()));
			$this->Render("PressEdit");
		}
		else
		{
			try
			{
				// this table does not have an auto-insert, so we have to specify an insert
				$force_insert = Request::Get("force_insert");
				$press->Save($force_insert);
				$this->Redirect("Press.ListAll","Press was saved");
			}
			catch(Exception $ex)
			{
				$this->Assign("press", $press);
				$this->_AssignChildren($press);
				$this->Assign("warning",$ex->getMessage());
				$this->Render("PressEdit");
			}

		}
	}

	function Delete()
	{
		$pk = Request::Get("Id");
		$press = $this->Phreezer->Get("Press",$pk);
		$press->Delete();
		$this->Redirect("Press.ListAll","Press was deleted");
	}

	private function _AssignModel($pk = null, $assign_children = true)
	{
		$press = $pk ? $this->Phreezer->Get("Press",$pk) : New Press($this->Phreezer);
		$this->Assign("press", $press);

		if ($assign_children)
		{
			$this->_AssignChildren($press);
		}
	}

	
	protected function LoadFromForm($pk = null)
	{
		// the primary key of this table is not an auto-insert
		$press = New Press($this->Phreezer);
		$press->Id = Request::Get("Id");
		$press->Title = Request::Get("Title");
		$press->Body = Request::Get("Body");
		$press->Author = Request::Get("Author");
		$press->AlbumId = Request::Get("AlbumId");
		
		return $press;
	}
	
	private function _AssignChildren($press)
	{
		// get possible values for AlbumId and assign as a value pair for html_options
		$album_ids = array();
		$collection = $this->Phreezer->Query("Albums");
		while ($album_id = $collection->Next())
		{
			$album_ids[$album_id->Id] = $album_id->BandName; // TODO: verify this is the right field
		}
		$this->Assign("AlbumIdPairs",$album_ids);

	}
}

?>