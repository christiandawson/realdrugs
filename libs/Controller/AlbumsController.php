<?php
/**
 * AlbumsController is the controller class for the Albums object
 *
 * @author Generated by ClassBuilder
 * @version 1.0
 */
 
require_once("verysimple/Phreeze/Controller.php");
require_once("Model/Albums.php");

class AlbumsController extends Controller
{

	protected function Init()
	{
		$this->ModelName = "Albums";
	}
	
	// base functions suggested to override
	// function ListAll() {}

	function ListPage()
	{
		// these parameters are supplied by extjs grid pagingtoolbar
		$s = Request::Get('start',0);  // start (zero based)
		$ps = Request::Get('limit',20); // page size
		$sc = Request::Get('sort'); // name of column for sorting
		$sd = Request::Get('dir','ASC'); // sort direction
		$cp = $s/$ps + 1; // current page
		
		require_once("Model/DAO/AlbumsCriteria.php");
		$criteria = new AlbumsCriteria();
		
		// if a sort was specified, add it to the criteria
		if ($sc)
		{
			$criteria->SetOrder($sc, ($sd == "ASC") );
		}
		
		$datapage = $this->Phreezer->Query("Albums",$criteria)->GetDataPage($cp,$ps);
		
		$this->RenderXML($datapage);
	}
	
	function Display()
	{
		$this->_AssignModel(Request::Get("Id"));
		$this->Render("AlbumsDisplay");
	}

	function Edit()
	{
		$this->_AssignModel(Request::Get("Id"));
		$this->Render("AlbumsEdit");
	}
	
	function Create()
	{
		$this->_AssignModel();
		$this->Render("AlbumsEdit");
	}
	
	function Save()
	{
		$pk = Request::Get("Id");
		
		$albums = $this->LoadFromForm($pk);
		
		if (!$albums->Validate())
		{
			$this->Assign("albums", $albums);
			$this->_AssignChildren($albums);
			$this->Assign("warning",implode("<br />",$albums->GetValidationErrors()));
			$this->Render("AlbumsEdit");
		}
		else
		{
			try
			{
				$albums->Save();
				$this->Redirect("Albums.ListAll","Albums was saved");
			}
			catch(Exception $ex)
			{
				$this->Assign("albums", $albums);
				$this->_AssignChildren($albums);
				$this->Assign("warning",$ex->getMessage());
				$this->Render("AlbumsEdit");
			}

		}
	}

	function Delete()
	{
		$pk = Request::Get("Id");
		$albums = $this->Phreezer->Get("Albums",$pk);
		$albums->Delete();
		$this->Redirect("Albums.ListAll","Albums was deleted");
	}

	private function _AssignModel($pk = null, $assign_children = true)
	{
		$albums = $pk ? $this->Phreezer->Get("Albums",$pk) : New Albums($this->Phreezer);
		$this->Assign("albums", $albums);

		if ($assign_children)
		{
			$this->_AssignChildren($albums);
		}
	}

	
	protected function LoadFromForm($pk = null)
	{
		$albums = $pk ? $this->Phreezer->Get("Albums",$pk) : New Albums($this->Phreezer);
		// $albums->Id = Request::Get("Id"); // this is an auto-increment
		$albums->BandName = Request::Get("BandName");
		$albums->AlbumName = Request::Get("AlbumName");
		$albums->ReleaseDate = Request::Get("ReleaseDate");
		$albums->CoverArt = Request::Get("CoverArt");
		$albums->Credits = Request::Get("Credits");
		
		return $albums;
	}
	
	private function _AssignChildren($albums)
	{
		// get FaAlbumId child records and assign as DataPage for grid display
		// if this code throws an error, check that your foreign key name is not the same as the table name
		$FaAlbumId = $albums->GetFaAlbumId()->GetDataPage(1,9999); // TODO: update if pagination is necessary
		$this->Assign("FaAlbumIdDataPage",$FaAlbumId);

		// get PAlbumId child records and assign as DataPage for grid display
		// if this code throws an error, check that your foreign key name is not the same as the table name
		$PAlbumId = $albums->GetPAlbumId()->GetDataPage(1,9999); // TODO: update if pagination is necessary
		$this->Assign("PAlbumIdDataPage",$PAlbumId);

		// get SAlbumId child records and assign as DataPage for grid display
		// if this code throws an error, check that your foreign key name is not the same as the table name
		$SAlbumId = $albums->GetSAlbumId()->GetDataPage(1,9999); // TODO: update if pagination is necessary
		$this->Assign("SAlbumIdDataPage",$SAlbumId);

	}
}

?>